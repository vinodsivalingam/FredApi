/*
 
Application fetches the below detailes and store the observation in relational database
 
    - Real Gross Domestic Product (GDPC1)
    - University of Michigan Consumer Sentiment Index (UMCSENT)
    - US Civilian Unemployment Rate (UNRATE)
 
*/
 
object FredApplication extends App {
 
  import java.sql.DriverManager
  import scala.util.parsing.json._
 
  @throws(classOf[java.net.SocketTimeoutException])
  @throws(classOf[java.io.IOException])
  
  def get(url: String,
          connectTimeout:Int =1000,
          readTimeout:Int =1000,
          requestMethod: String = "GET") = {
    import java.net.{HttpURLConnection, URL}
    val connection = (new URL(url)).openConnection.asInstanceOf[HttpURLConnection]
    connection.setConnectTimeout(connectTimeout)
    connection.setReadTimeout(readTimeout)
    connection.setRequestMethod(requestMethod)
    val inputStream = connection.getInputStream
    val content = io.Source.fromInputStream(inputStream).mkString
    if (inputStream != null) inputStream.close
    content
  }
 
  // CHange the unknown values with 0.0
  def parseZero(s : String) = try { s.toDouble }  catch { case _ :Exception => 0.0}
 
  // DB connection Setup
  
   val dbConnection = DriverManager.getConnection(sys.env("jdbc:postgresql://localhost:5432/fred?user=username&password=password"))
  val statement = dbConnection.createStatement()
 
  // The series GDPC1, UMCSENT, UNRATE are fetched
  val seriesOfFRED = List("GDPC1", "UMCSENT", "UNRATE" )
  
  for(series <- seriesOfFRED) {
    println("Fetching Series: " + series)
 
    // get the JSON content as a string
    val content = get("https://api.stlouisfed.org/fred/series/observations?series_id=%s&api_key=%s&file_type=json".
      format(series, sys.env("b717d3a6c46a42d61788b82df06e0670"))
    )
   
    // Parsing the response into object
    val respFromFRED = JSON.parseFull(content)
    // Let's get the observations part
    val observations = respFromFRED.get.asInstanceOf[Map[String, Any]]("observations").asInstanceOf[List[Any]]
 
    // Insert SQL script creation to run against the database
    for(singleOb <- observations) {
      
      val insertStr = "INSERT INTO %s(datestamp, realtime_start, realtime_end, value) VALUES('%s','%s','%s', %g);".
        format(
          series,
          singleOb.asInstanceOf[Map[String, Any]]("date").asInstanceOf[String],
          singleOb.asInstanceOf[Map[String, Any]]("realtime_start").asInstanceOf[String],
          singleOb.asInstanceOf[Map[String, Any]]("realtime_end").asInstanceOf[String],
          parseDoubleOrZero(singleOb.asInstanceOf[Map[String, Any]]("value").asInstanceOf[String])
        )
 
      println(insertStr)
          
    // Store the observations in a relational database running on localhost
      
      try {
        val statement = dbConnection.createStatement()
        statement.executeUpdate(insertStr)
      } catch {
        case e : Exception => println(" Insertion to the database failed " + e.printStackTrace())
      }
    } 
  } 
  
  dbConnection.close
}
